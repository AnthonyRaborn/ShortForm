% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulated_annealing.R
\name{simulatedAnnealing}
\alias{simulatedAnnealing}
\title{An adaptation of the simulated annealing algorithm for psychometric models.}
\usage{
simulatedAnnealing(
  initialModel,
  originalData,
  maxSteps,
  fitStatistic = "cfi",
  temperature = "linear",
  maximize = TRUE,
  Kirkpatrick = TRUE,
  randomNeighbor = TRUE,
  lavaan.model.specs = list(model.type = "cfa", auto.var = TRUE, estimator = "default",
    ordered = NULL, int.ov.free = TRUE, int.lv.free = FALSE, std.lv = TRUE, auto.fix.first
    = FALSE, auto.fix.single = TRUE, auto.cov.lv.x = TRUE, auto.th = TRUE, auto.delta =
    TRUE, auto.cov.y = TRUE),
  maxChanges = 5,
  restartCriteria = "consecutive",
  maximumConsecutive = 25,
  maxItems = NULL,
  items = NULL,
  bifactor = FALSE,
  progress = "bar",
  ...
)
}
\arguments{
\item{initialModel}{The initial model as a character vector with lavaan model.syntax.}

\item{originalData}{The original data frame with variable names.}

\item{maxSteps}{The number of iterations for which the algorithm will run.}

\item{fitStatistic}{Either a single model fit statistic produced by lavaan, or a user-defined fit statistic function.}

\item{temperature}{Either an acceptable character value, or a user-defined temperature function. The acceptable values are "linear", "quadratic", or "logistic".}

\item{maximize}{Logical indicating if the goal is to maximize (TRUE) the fitStatistic for model selection.}

\item{Kirkpatrick}{Either TRUE to use Kirkpatrick et al. (1983) acceptance probability, or a user-defined function for accepting proposed models.}

\item{randomNeighbor}{Either TRUE to use the included function for randomNeighbor selection, or a user-defined function for creating random models.}

\item{lavaan.model.specs}{A list which contains the specifications for the
lavaan model. The default values are the defaults for lavaan to perform a
CFA. See \link[lavaan]{lavaan} for more details.}

\item{maxChanges}{An integer value greater than 1 setting the maximum number of parameters to change within randomNeighbor. When creating a short form, should be no greater than the smallest reduction in items loading on one factor; e.g., when reducing a 2-factor scale from 10 items on each factor to 8 items on the first and 6 items on the second, maxChanges should be no greater than 2.}

\item{restartCriteria}{Either "consecutive" to restart after maxConsecutiveSelection times with the same model chosen in a row, or a user-defined function.}

\item{maximumConsecutive}{A numeric value used with restartCriteria.}

\item{maxItems}{When creating a short form, a vector of the number of items per factor you want the short form to contain. Defaults to \code{NULL}.}

\item{items}{A character vector of item names. Defaults to \code{NULL}. Ignored if \code{maxItems==FALSE}.}

\item{bifactor}{Logical. Indicates if the latent model is a bifactor model. If \code{TRUE}, assumes that the last latent variable in the provided model syntax is the bifactor (i.e., all of the retained items will be set to load on the last latent variable). Ignored if \code{maxItems==FALSE}.}

\item{progress}{Character. If \code{'bar'}, the function prints a progress bar indicating how far along it is. If \code{'text'}, prints the current step value. Otherwise, nothing is printed to indicate the progress of the function.}

\item{...}{Further arguments to be passed to other functions. Not implemented for any of the included functions.}
}
\value{
A named list: the 'bestModel' found, the 'bestFit', and 'allFit' values found by the algorithm.
}
\description{
Simulated annealing mimics the physical process of annealing metals together. \href{http://science.sciencemag.org/content/220/4598/671}{Kirkpatrick et al. (1983)} introduces this analogy and demonstrates its use; the implementation here follows this demonstration closely, with some modifications to make it better suited for psychometric models.
}
\details{
\strong{Outline of the Pieces of the Simulated Annealing Algorithm}
\itemize{
\item initialModel -- the initial, full form
\item currentModel -- the model of the current step
\item maxSteps -- the maximum number of steps (iterations)
\item currentStep -- the current step
\item currentTemp -- the current temperature. A function of the number of steps (such that temp = 0 at maxSteps), and values that control the shape of the overall temperature. A part of the function that determines the acceptance probability of newly -- generated models
\item randomNeighbor -- a function that determines how the form is changed at each step. Should be able to change one or more parameters, and should have a way to control how many are changed.
\item goal -- a function that determines the "goodness" of the currentModel. Typically in SA goodness is defined as minimization! Sometimes called an energy function
\item selectionFunction -- a function that determines if a randomNeighbor change is accepted. Uses the goal function that determines the "goodness" of the currentModel and the "goodness" of the randomNeighbor, and the currentTemp to generate a probability of acceptance, then compares this probability to a Uniform(0,1) variable to determine if accepted or not. A standard version of this is:
\figure{SA-goal.jpg}{}
(Kirkpatrick et al., 1983)
\item bestModel -- the model with the best value of the goal function achieved so far
\item bestGoal -- the best value of the goal function achieved so far
\item restartCriteria -- if utilized, this would "restart" the SA process by changing currentModel to bestModel and continuing the process. Could be based on (1) the currentStep value, (2) the difference between goal(currentModel) and goal(bestModel), (3) randomness (i.e., could randomly restart, could randomly restart based on some values, etc), (4) other critera.
}
}
\examples{
\dontrun{
data(exampleAntModel)
data(simulated_test_data)
trial1 <- simulatedAnnealing(initialModel = lavaan::cfa(model = exampleAntModel,
                                                        data = simulated_test_data),
                             originalData = simulated_test_data, maxSteps = 3,
                             fitStatistic = 'rmsea', maximize = FALSE)
# lavaan::summary(trial1[[1]]) # shows the resulting model

trial2 <- simulatedAnnealing(initialModel = exampleAntModel,
originalData = simulated_test_data,
maxSteps = 2, maxItems = 30, items = paste0("Item", 1:56))
# lavaan::summary(trial2[[1]]) # shows the resulting model
}
}
